exit
checkbox.include? 'checked="checked"'
 checkbox = $browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.td.html
checkbox.include? 'checked="checked"'
 checkbox = $browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.td.html
exit
checkbox.include? 'checked="checked"'
 checkbox = $browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.td.html
checkbox.include? 'checked="checked"'
 checkbox = $browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.td.html
checkbox.include? 'checked="checked"'
checkbox.include? 'class="ng-scope"'
checkbox
checkbox.include? 'checked = "checked"'
checkbox.include? 'checked ="checked"'
 checkbox = $browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.td.html
checkbox.include? 'checked ="checked"'
 checkbox = $browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.td.html
@projectsUI.checkbox_check('Test data client 1')
@projectsUI.checkbox_check('Test Data client 1')
@projectUI.checkbox_check('Test Data client 1')
checkbox_check('Test Data client 1')
c
exit
checkbox_check(dataClientName) == false
checkbox_check(dataClientName)
checkbox_check
self.checkbox_check
self.checkbox_check ==false
self.checkbox ==false
checkbox_check(dataClientName)
c
return
(checkbox.include? 'checked ="checked"')
checkbox.include? 'checked ="checked"'
checkbox = $browser.element(:css=>"#tab-content-1").td(:text=>dataClientName).parent.td.html
checkbox.include? 'checked ="checked"'
return checkbox.include? 'checked ="checked"'
checkbox.include? 'checked ="checked"'
checkbox = $browser.element(:css=>"#tab-content-1").td(:text=>dataClientName).parent.td.html
return checkbox.include? 'checked="checked"'
self.checkbox_check
checkbox.include? 'checked="checked"'
checkbox = $browser.element(:css=>"#tab-content-1").td(:text=>dataClientName).parent.td.html
exit
object.include? 'class="md-label"'
object.include? 'class="\d-label"'
object.include? 'class="\md-label\"'
object
object.include? "class=\md-label\"
object.include? 'class=\\"md-label\\"'
object.include? 'class=\"md-label\"'
object.include? "class=\md-label\"
object.if
object.include?
object.include? "
object.include? " 
object.if
object.
object.class
type(object)
object.type()
object.type(_
object.
object.type
object = $browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.td.html
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.td.htm
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.td.html.object = 
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.td.html
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.td.elements
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.td.to_a
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.td.hashes
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.td.hash
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.td.methods
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.td.element
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.td.elements
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').asdf
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.td.html
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').asdf
$browser.element(:tag_name =>"md-checkbox").checked()
$browser.element(:tag_name =>"md-checkbox", :che
$browser.element(:tag_name =>"md-checkbox", :checked)
$browser.element(:tag_name =>"md-checkbox", )
$browser.element(:tag_name =>"md-checkbox", :id =>"dataAssociated").click()
$browser.element(:tag_name =>"md-checkbox")
$browser.element(:tag_name =>"md-checkbox").click()
$browser.element(:tag_name =>"md-checkbox", :id =>"dataAssociated").click()
$browser.element(:tag_name =>"md-checkbox", :id =>"dataAssoc
$browser.element(:tag_name =>"md-checkbox", :id =>"dataAssoclick()
$browser.element(:tag_name =>"md-checkbox", :id =>"dataAssociated").exists?
$browser.element
$browser.element(:tag_name =>"md-checkbox").text
$browser.element(:tag_name =>"md-checkbox").exists?
$browser.element
$browser.ele
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:tag_name => 'md-checkbox', "input:checked =>'checked').e
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:css, "input[checked ='checked']").
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:css, "input[checked ='checked']").text
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:css, "input[checked ='checked']").exis
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:css, "input[checked ='checked']").exists?
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:css, "input[checked ='checked']")
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:tag_name => 'md-checkbox "input[checked ='checked']")
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:tag_name => 'md-checkbox', "input[checked ='checked']")
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:tag_name => 'md-checkbox', "input[checked ='checked']").exis
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:tag_name => 'md-checkbox', "input[checked ='checked']").exists?
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:tag_name => 'md-checkbox', "input[checked ='checked']").e
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:tag_name => 'md-checkbox', "input:checked =>'checked').e
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:tag_name => 'md-checkbox', :checked =>'checked').e
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:tag_name => 'md-checkbox').exists?
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:tag_name => 'md-checkbox', :checked =>'checked').e
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:tag_name => 'md-checkbox', :checked =>'checked').exists?
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:tag_name => 'md-checkbox', checked =>'checked').exists?
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:tag_name => 'md-checkbox', checked =>'checkl).exists?
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:tag_name => 'md-checkbox', checked =>'checked').exists?
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:tag_name => 'md-checkbox', checked =>'checkl).exists?
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:tag_name => 'md-checkbox').exists?
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:tag_name => 'md-checkbox).exists?
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:tag_name => 'md-checkbox').exists?
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:tag_name => 'md-checkbox).exists?
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.element(:tag_name => 'md-checkbox).ex
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.a
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.ele
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.
$browser.ele
$browser.tr(:'md-virtual-repeat' =>
$browser.ele
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').asd
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').asd
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').asdf
  $browser.element(:css=>"#dataAssociated").c
 $browser.element(:tag_name =>'md-checkbox', :id => 'dataAssociated').td(:text=>dataClientName).parent.td.click
 $browser.element(:tag_name =>'md-checkbox', :id => 'dataAssociated').
 $browser.element(:tag_name =>'md-checkbox', :id => 'dataAssociated').td(:text=>'Test data client 2').parent.td.click
 $browser.element(:tag_name =>'md-checkbox', :id => 'dataAssociated').td(:text=>dataClientName).parent.td.click
 $browser.element(:tag_name =>'md-checkbox', :id => 'dataAssociated').click
 $browser.element(:tag_name =>'md-checkbox', :id => 'dataAssociated').exists?
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.td.click
  $browser.element(:css=>"#dataAssociated > checked").
  $browser.element(:css=>"#dataAssociated > #checked").
  $browser.element(:css=>"#dataAssociated > .checked").
  $browser.element(:css=>"#dataAssociated > checked").exists?
  $browser.element(:css=>"#dataAssociated > checked")
  $browser.element(:css=>"#dataAssociated > 
  $browser.
  $browser.element(:css=>"#dataAssociated").exists?
$browser.td(:text=>'Test data client 1').parent.tds[1].visible?
$browser.td(:text=>'Test data client 1').parent.tds[2].visible?
$browser.td(:text=>'Test data client 1').parent.tds[3].visible?
$browser.td(:text=>'Test data client 1').parent.tds[2].visible?
$browser.td(:text=>'Test data client 1').parent.tds[0].visible?
$browser.td(:text=>'Test data client 1').parent.tds[1].visible?
$browser.td(:text=>'Test data client 1').parent.td.visible?
$browser.td(:text=>'Test data client 1').parent.td.exists?
$browser.td(:text=>'Test data client 1').parent.td.click
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1').parent.td.click
$browser.element(:css=>"#tab-content-1").td(:text=>'Test data client 1).parent.td.click
$browser.element(:css=>"#tab-content-1").td(:text=>dataClientName).parent.td.click
$browser.element(:css=>"#tab-content-1").td(:text=>dataClientName).parent.td.
c
exit
c
exit
@custom_attribute_gridview.checkbox_all_available_attributes
@custom_attribute_gridview.grid_attribute_edit("Test data client 1")
@custom_attribute_gridview.grid_attribute_close
@custom_attribute_gridview.wait_until_undo_delete_clears
 puts $browser.title
 @custom_attribute_gridview.checkbox_all_available_attributes
@custom_attribute_gridview.grid_attribute_edit("Test data client 1")
 @custom_attribute_gridview.grid_attribute_close
self.wait_while_spinning
$browser.button(:id=>'attributeEdit').click
exit
 $browser.span(:text =>'Attribute deleted').wait_while_present
 puts $browser.title
$browser.span(:text =>'Attribute deleted').exists?
$browser.span(:class=>'md-toast-text-ng-binding', :text =>'Attribute deleted').exists?
c
exit
 $browser.elements(:css=>'#dialogContent_customGridAttributesDialog div div [ng-model]')[count_attributes-1].click
count_attributes = $browser.elements(:css=>'#dialogContent_customGridAttributesDialog div div [ng-model]').count
$browser.element(:css=>'#customGridAttributesDialog > md-dialog-actions > div > button').click
$browser.span(:text => attributeType).click
$browser.element(:css=>"[ng-click='$mdOpenMenu($event)']").click
$browser.text_field(:css=>"[ng-model='addAttributeName']").set attributeName
self.add_new_custom_attribute
 $browser.element(:css=>'#customGridAttributesDialog > md-dialog-actions > div > button').click
exit
$browser.elements(:css=>'#dialogContent_customGridAttributesDialog div div [ng-model]')[count_attributes-1].click
count_attributes = $browser.elements(:css=>'#dialogContent_customGridAttributesDialog div div [ng-model]').count
$browser.element(:css=>'#customGridAttributesDialog > md-dialog-actions > div > button').click
$browser.span(:text => attributeType).click
$browser.element(:css=>"[ng-click='$mdOpenMenu($event)']").click
$browser.text_field(:css=>"[ng-model='addAttributeName']").set attributeName
$browser.element(:tag_name => 'md-icon', :text=>'add').click
c
exit
$browser.element(:tag_name => 'md-icon', :text=>'add').click
 $browser.text_field(:css=>"[ng-model='addAttributeName']").visible?
 $browser.text_field(:css=>"[ng-model='addAttributeName']").exists?
c
exit
$browser.element(:tag_name=> 'md-dialog-content', :id => 'dialogContent_customGridAttributesDialog').div(:text =>'DateName_Grid').parent.parent.button.click
$browser.element(:tag_name=> 'md-dialog-content', :id => 'dialogContent_customGridAttributesDialog').div(:text =>'TextName_Grid').parent.parent.button.click
$browser.element(:tag_name=> 'md-dialog-content', :id => 'dialogContent_customGridAttributesDialog').div(:text =>'TextName_Grid').parent.parent.button.exists?
$browser.element(:tag_name=> 'md-dialog-content', :id => 'dialogContent_customGridAttributesDialog').div(:text =>'TextName_Grid').parent.methods
$browser.element(:tag_name=> 'md-dialog-content', :id => 'dialogContent_customGridAttributesDialog').div(:text =>'TextName_Grid').parent.button.exists?
$browser.element(:tag_name=> 'md-dialog-content', :id => 'dialogContent_customGridAttributesDialog').div(:text =>'TextName_Grid').parent.exists?
$browser.element(:tag_name=> 'md-dialog-content', :id => 'dialogContent_customGridAttributesDialog').div(:text =>'TextName_Grid').visible?
$browser.element(:tag_name=> 'md-dialog-content', :id => 'dialogContent_customGridAttributesDialog').div(:text =>'TextName_Grid').exists?
$browser.element(:tag_name=> 'md-dialog-content', :id => 'dialogContent_customGridAttributesDialog').div(:text =>'TextName_Grid').parent.button.click
adsfds
exit
c
exit
expect(@custom_attribute_gridview.grid_attribute_columns('Boolean_Name_Grid')).to be true
c
expect(@custom_attribute_gridview.grid_attribute_columns('TextName_Grid')).to be true
c
exit
$browser.element(:tag_name=>'md-virtual-repeat-container', :id =>'custodiansCardTable').tr.th(:text=>'TextName_Grid').exists?
$browser.element(:tag_name=>'md-virtual-repeat-container', :id =>'custodiansCardTable').th(:text=>'TextName_Grid').exists?
$browser.element(:tag_name=>'md-virtual-repeat-container', :id =>'custodiansCardTable').tr.th(:text=>'TextName_Grid').exists?
$browser.element(:tag_name=>'md-virtual-repeat-container', :id =>'custodiansCardTable').tr(:text=>'TextName_Grid').exists?
$browser.element(:tag_name=>'md-virtual-repeat-container', :id =>'custodiansCardTable').tr(:text=>'TextName_Grids').exists?
$browser.element(:tag_name=>'md-virtual-repeat-container', :id =>'custodiansCardTable').tr.th(:text=>'TextName_Grids').exists?
$browser.element(:tag_name=>'md-virtual-repeat-container', :id =>'custodiansCardTable').tr.th(:text=>'TextName_Grid').exists?
$browser.element(:tag_name=>'md-virtual-repeat-container', id =>'custodiansCardTable').tr.th(:text=>'TextName_Grid').exists?
$browser.element(:tag_name=>'md-virtual-repeat-container', :text=>'TextName_Grid').exists?
$browser.element(:tag_name=>'md-virtual-repeat-container').tr(:text=>'TextName_Grid').exists?
$browser.element(:tag_name=>'md-virtual-repeat-container').tr.th(:text=>'TextName_Grid').exists?
 @custom_attribute_gridview.grid_attribute_close
 @custom_attribute_gridview.grid_attribute_add('Boolean_Name_Grid', 'True/False')
@custom_attribute_gridview.grid_attribute_add('DateName_Grid', 'Date')
@custom_attribute_gridview.grid_attribute_add('NumericName_Grid', 'Numeric')
@custom_attribute_gridview.grid_attribute_add('TextName_Grid', 'Text')
@custom_attribute_gridview.grid_attributes_edit("Test data client 1")
c
$browser.element(:tag_name => 'md-icon', :text=>'add').click
$browser.element(:tag_name => 'md-icon', :text=>'add').visible?
$browser.element(:tag_name => 'md-icon', :text=>'add').exists?
$browser.button(:id=>'attributeAdd').exists?
$browser.button(:id=>'attributeAdd').visible?
$browser.button(:id=>'attributeAdd').exists?
$browser.button(:id=>'attributeAdd').click
self.add_new_custom_attribute
  @custom_attribute_gridview.grid_attribute_add('TextName_Grid', 'Text')
 @custom_attribute_gridview.grid_attribute_add('NumericName_Grid', 'Numeric')
$browser.span(:text => 'Text').click
$browser.span(:text => 'Numeric').click
 @custom_attribute_gridview.grid_attribute_add('TextName_Grid', 'Text')
@custom_attribute_gridview.grid_attributes_edit(DataClientEdit::Details['name'])
 $browser.button(:id=>'attributeAdd').click
@custom_attribute_gridview.grid_attribute_add('TextName_Grid', 'Text')
